Domain PrestacaoServicos {
    Subdomain Usuarios
    Subdomain Pedidos
    Subdomain Servicos
    Subdomain Avaliacao
}

ContextMap {
    contains Usuarios
    contains Pedidos
    contains Servicos
    contains Avaliacao

    Pedidos Shared-Kernel Usuarios
    Servicos Shared-Kernel Usuarios
    Avaliacao Shared-Kernel Usuarios
    Pedidos Shared-Kernel Servicos
    Avaliacao Shared-Kernel Servicos
}

BoundedContext Usuarios implements Usuarios {
    Aggregate Cliente {
        Entity Cliente {
            aggregateRoot
            -int id
            String nome
            String email
            String telefone
            Endereco endereco
            List<Prestador> prestadoresFavoritos
            List<PrestacaoServico> historicoDeServicos
        }
    }

    Aggregate Prestador {
        Entity Prestador {
            aggregateRoot
            -int id
            String nome
            String tipoServico
            String email
            String telefone
            Endereco endereco
        }
    }

    ValueObject Endereco {
        String rua
        String bairro
        String cidade
        String estado
    }

    Repository ClienteRepository {

        +save(cliente : Cliente) : void
        +findAll() : List<Cliente>
        +delete(cliente : Cliente) : void

    }

    Repository PrestadorRepository {
            +save(prestador : Prestador) : void
            +findByName(name : String) : List<Prestador>
            +findById(id : int) : Prestador
            +findAll() : List<Prestador>
            +delete(prestador : Prestador) : void
    }
}

BoundedContext Pedidos implements Pedidos {
    Aggregate Pedido {
        Entity Pedido {
            aggregateRoot
            -int id
            PrestacaoServico servico
            int prestadorId
            int clienteId
            date data
            StatusPedido status
        }

        ValueObject StatusPedido {
            Enum StatusPedido {
                PENDENTE,
                CONCLUIDO,
                CANCELADO
            }
        }
    }

    Repository PedidosRepository {

                +save(pedido : Pedido) : void
                +findByClientName(nome : String) : List<Pedido>
                +findByPrestadorName(nome: String): List<Pedido>
                +findById(id : int) : Servico
                +deleteById(id : int) : void

    }

}

BoundedContext Servicos implements Servicos {
    Aggregate PrestacaoServico {
        Entity PrestacaoServico {
            aggregateRoot
            -int id
            String descricao
            float valor
            String bairro
            String categoria
            String prestador
        }
    }
    Repository ServicosRepository {

                +save(servico : Servico) : void
                +findByPrestadorName(nome: String): List<Servico>
                +findById(id : int) : Servico
                +deleteById(id : int) : void

    }
}

BoundedContext Avaliacao implements Avaliacao {
    Aggregate Avaliacao {
        Entity Avaliacao {
            aggregateRoot
            -int id
            int prestadorId
            int clienteId
            float nota
            String comentario
            TipoAvaliacao tipoAvaliacao
        }

        ValueObject TipoAvaliacao {
            Enum TipoAvaliacao {
                CLIENTE_AVALIA_PRESTADOR,
                PRESTADOR_AVALIA_CLIENTE
            }
        }
    }

    Repository AvaliacaoRepository {

                    +save(avaliacao : Avaliacao) : void
                    +deleteById(id : int) : void

        }
}
