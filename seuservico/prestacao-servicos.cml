ContextMap PrestacaoServicosMap {
  contains ContratacaoContext
  contains PerfilContext
  contains PagamentoContext
  
  ContratacaoContext [D]<-> [U] PerfilContext
  ContratacaoContext [D]<- [U] PagamentoContext
}

Context ContratacaoContext {
  Aggregate Servicos {
    Entity Servico {
      aggregateRoot
      
      String titulo
      String descricao
      - AreaAtuacao area
    }
    
    Entity PedidoServico {
      - ClienteId cliente
      - ServicoId servico
      String detalhes
      LocalDateTime dataDesejada
      Endereco local
      StatusPedido status
    }
    
    Entity Proposta {
      - PrestadorId prestador
      - PedidoServicoId pedido
      BigDecimal valor
      String condicoes
      LocalDate prazo
      StatusProposta status
    }
    
    Enum StatusPedido {
      ABERTO, CANCELADO, CONTRATADO, CONCLUIDO
    }
    
    Enum StatusProposta {
      PENDENTE, ACEITA, RECUSADA
    }
  }
}

Context PerfilContext {
  Aggregate Usuarios {
    Entity Cliente {
      aggregateRoot
      
      String nome
      String email
      String telefone
      Endereco endereco
      List<Prestador> favoritos
    }
    
    Entity Prestador {
      aggregateRoot
      
      String nome
      String email
      String telefone
      Endereco endereco
      List<AreaAtuacao> areas
      BigDecimal avaliacaoMedia
      List<Disponibilidade> horarios
    }
    
    ValueObject Disponibilidade {
      DayOfWeek dia
      TimeSpan horarioInicio
      TimeSpan horarioFim
    }
  }
  
  Aggregate Avaliacoes {
    Entity Avaliacao {
      - ClienteId cliente
      - PrestadorId prestador
      - ServicoId servico
      Integer nota
      String comentario
      LocalDate data
    }
  }
}

Context PagamentoContext {
  Aggregate Transacoes {
    Entity Contratacao {
      aggregateRoot
      
      - PropostaId proposta
      BigDecimal valorTotal
      BigDecimal taxaPlataforma
      StatusPagamento status
    }
    
    Enum StatusPagamento {
      PENDENTE, PROCESSANDO, CONCLUIDO, REEMBOLSADO
    }
    
    Service CalculadoraTaxa {
      BigDecimal calcularTaxa(BigDecimal valorServico);
    }
  }
}